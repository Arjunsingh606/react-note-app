import { useState, useEffect } from "react";
import Header from "./Header";
import TextEditor from "./TextEditor";
import LableDropdown from "./LableDropdown";
import { Container, Row, Col, Form, Button, Card } from "react-bootstrap";
import "../styles/notesApp.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faPlus,
  faMagnifyingGlass,
  faArrowTrendUp,
  faTrashCan,
} from "@fortawesome/free-solid-svg-icons";
import {
  FormValues,
  ColorLable,
  colorOptions,
  Notedata,
} from "../interface/Interfaces";
import NoteSlider from "./NoteSlider";
import DeleteModal from "./DeleteModal";

const NotesDashboard = () => {
  const [title, setTitle] = useState<string>("Title");
  const [changeInput, setChangeInput] = useState<boolean>(false);
  const [label, setLabel] = useState<ColorLable | undefined>({});
  const [noteText, setNoteText] = useState<any>();
  const [noteDate, setNoteDate] = useState<any>("");
  const [notes, setNotes] = useState<Notedata[]>([]);
  const [showEditor, setShowEditor] = useState<boolean>(false);
  const [searchNote, setSearchNote] = useState<any>("");
  const [selectedNote, setSelectedNote] = useState<Notedata | null>(null);
  const [editNote, seteditNote] = useState<boolean>(false);
  // for delete
  const [deletModal, setDeleteModal] = useState<boolean>(false);
  const [noteId, setNoteId] = useState<string>("");

  const getColor = label?.color;
  const getLable = label?.label;

  const getNotesData = async () => {
    try {
      const response = await fetch("http://localhost:3001/notes");
      const getNotes = await response.json();
      const filteredNotes = getNotes.filter((item: Notedata) =>
        item.title?.toLowerCase().includes(searchNote.toLowerCase())
      );
      setNotes(filteredNotes);
    } catch (error) {
      console.log(error, "getting error while fetching data");
    }
  };

  useEffect(() => {
    getNotesData();
  }, [searchNote]);

  const handleChangeInput = (e: any) => {
    setChangeInput(true);
    setTitle(e.target.value);
  };
  const handleChangeText = (e: any) => {
    setChangeInput(false);
    if (title) {
      setTitle(e.target.value);
    } else {
      setTitle("Title");
    }
  };

  const user = sessionStorage.getItem("loginUser");
  let getName;
  let userFullName: string;
  if (user) {
    const getUser: FormValues = JSON.parse(user);
    userFullName = `${getUser.firstName} ${getUser.lastName}`;
    getName = `${getUser.firstName?.charAt(0).toUpperCase()}${getUser.lastName
      ?.charAt(0)
      .toUpperCase()}`;
  }
  // for current time
  const currDate = new Date().toLocaleDateString();
  const currTime = new Date().toLocaleTimeString();

  const handleIconClick = () => {
    if (selectedNote) {
      setLabel({ label: selectedNote.label, color: selectedNote.color });
      setTitle(selectedNote.title || "Title");
      setNoteDate(selectedNote.date);
      setNoteText(selectedNote.textData);
      seteditNote(true);
      setShowEditor(!showEditor);
    } else {
      setShowEditor(!showEditor);
      seteditNote(false);
    }
  };
  const handleEditNote = (note: Notedata) => {
    setSelectedNote(note);
    handleIconClick();
  };


  const postNotesData = async () => {
    try {
      if (editNote && selectedNote) {
        const response = await fetch(
          `http://localhost:3001/notes/${selectedNote.id}`,
          {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              title: title,
              label: getLable,
              color: getColor,
              date: currDate,
              creatBy: userFullName,
              textData: noteText,
            }),
          }
        );
        if (response.ok) {
          setShowEditor(false);
          seteditNote(false);
          setSelectedNote(null);
        }
      } else {
        const response = await fetch("http://localhost:3001/notes", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            title: title,
            label: getLable,
            color: getColor,
            date: currDate,
            creatBy: userFullName,
            textData: noteText,
          }),
        });
        if (response.ok) {
          setShowEditor(false);
        }
      }
      getNotesData();
    } catch (error) {
      console.error("Error adding/updating note", error);
    }
  };

  const deleteNote = async (id: string) => {
    const deleteResponse = await fetch(`http://localhost:3001/notes/${id}`, {
      method: "DELETE",
    });
    if (deleteResponse.ok) {
      const updatedNotes = notes.filter((note) => note.id !== id);
      setNotes(updatedNotes);
      setShowEditor(!showEditor);
    }
  };

  const deleteModal = (id: string) => {
    setNoteId(id);
    setDeleteModal(true);
  };

  return (
    <>
      <section>
        <Container fluid>
          <Row>
            <Col className="note-haeder">
              <Header getName={getName} />
            </Col>
          </Row>
        </Container>
      </section>
      <section className="notes-dashboard">
        <Container fluid>
          <Row className="notes-content">
            <Col className="col-lg-3 notes-content">
              <Form.Group className="search-input">
                <Form.Control
                  type="text"
                  name="search"
                  value={searchNote}
                  placeholder="Search notes"
                  onChange={(e) => setSearchNote(e.target.value)}
                />
                <FontAwesomeIcon
                  icon={faMagnifyingGlass}
                  className="search-icon"
                />
              </Form.Group>
              <div className="plus-icon">
                <p>MY NOTES</p>
                <span className="icon">
                  <FontAwesomeIcon icon={faPlus} onClick={handleIconClick} />
                </span>
              </div>
              <div className="notes">
                <div className="notes-cards">
                  {notes &&
                    notes.map((note: Notedata) => {
                      return (
                        <Card
                          key={note.id}
                          className="notes-card"
                          onClick={() => handleEditNote(note)}
                        >
                          <Card.Body
                            className={`${
                              selectedNote?.id === note.id && "edit-border"
                            }`}
                          >
                            <Card.Title className="note-cards-title">
                              {note.title?.substring(0, 25)}...
                            </Card.Title>
                            <Card.Text>
                              {note.textData
                                ?.replace(/<[^>]+>/g, "")
                                .substring(0, 180)}{" "}
                              ....
                            </Card.Text>
                            <Card.Subtitle className="card-label-date">
                              <span
                                className="label-card"
                                style={{
                                  backgroundColor: note.color,
                                  color:
                                    note.label === "Blogging"
                                      ? "#cb9c81"
                                      : note.label === "Working"
                                      ? "#85d5d0"
                                      : note.label === "Personal"
                                      ? "#ae8ae7"
                                      : note.label === "Trading"
                                      ? "#4a169b"
                                      : note.label === "Technology"
                                      ? "#357827"
                                      : note.label === "Sports"
                                      ? "#838d4a"
                                      : note.label === "Travelling"
                                      ? "#114a11"
                                      : note.label === "Education"
                                      ? "#7c1c85"
                                      : note.label === "Finance"
                                      ? "#0664a1"
                                      : note.label === "Politics"
                                      ? "#c15d0f"
                                      : "",
                                }}
                              >
                                <FontAwesomeIcon icon={faArrowTrendUp} />
                                {note.label}
                              </span>
                              <span className="note-created-date">
                                {currDate === note.date ? (
                                  <p>Today</p>
                                ) : (
                                  note.date
                                )}
                              </span>
                            </Card.Subtitle>
                          </Card.Body>
                        </Card>
                      );
                    })}
                </div>
                <NoteSlider
                  notes={notes}
                  handleEditNote={handleEditNote}
                  selectedNote={selectedNote}
                  currDate={currDate}
                />
                {notes.length === 0 && (
                  <h3 className="note-not-found">No notes found !!!</h3>
                )}
              </div>
            </Col>
            <Col className="col-lg-9 notes-editor">
              {showEditor ? (
                <div>
                  <div className="note-title">
                    <div>
                      <div className="note-headings">
                        <h3>#</h3>
                        <LableDropdown
                          options={colorOptions}
                          setLabel={setLabel}
                          label={label}
                          selectedNote={selectedNote}
                        />
                        <h3>/</h3>
                        <div>
                          {changeInput ? (
                            <Form.Control
                              type="text"
                              id="inputTitle"
                              aria-describedby="inputTitle"
                              placeholder="Write title"
                              value={title || ""}
                              onChange={handleChangeInput}
                              onBlur={handleChangeText}
                            />
                          ) : (
                            <div onClick={handleChangeInput} className="title">
                              {title}
                            </div>
                          )}
                        </div>
                      </div>
                      <div className="date-label">
                        <h6>{userFullName!}</h6>
                        <div className="time-lable">
                          <span>{noteDate}</span>
                          <span>{currTime}</span>
                        </div>
                      </div>
                    </div>
                    {selectedNote && (
                      <div
                        className="delete-icon"
                        onClick={() => deleteModal(selectedNote.id!)}
                      >
                        <FontAwesomeIcon icon={faTrashCan} />
                      </div>
                    )}
                  </div>
                  <div>
                    <TextEditor setNoteText={setNoteText} noteText={noteText} />
                  </div>
                  <div className="note-save-btn">
                    <Button onClick={postNotesData}>Save</Button>
                  </div>
                </div>
              ) : notes.length === 0 ? (
                <div className="no-notes-msg">
                  <h3>No notes available !!!</h3>
                </div>
              ) : (
                <div className="no-notes-msg">
                  <h3>Please select note !!!</h3>
                </div>
              )}
              <DeleteModal
                deleteNote={deleteNote}
                setDeleteModal={setDeleteModal}
                noteId={noteId}
                deletModal={deletModal}
              />
            </Col>
          </Row>
        </Container>
      </section>
    </>
  );
};
export default NotesDashboard;